# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."wg-easy" = {
    image = "ghcr.io/wg-easy/wg-easy:15";
    volumes = [
      "/lib/modules:/lib/modules:ro"
      "wge_etc_wireguard:/etc/wireguard:rw"
    ];
    ports = [
      "51820:51820/udp"
      "51821:51821/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--cap-add=NET_RAW"
      "--cap-add=SYS_MODULE"
      "--ip6=fdcc:ad94:bacf:61a3::2a"
      "--ip=10.42.42.42"
      "--network-alias=wg-easy"
      "--network=wge_wg"
      "--sysctl=net.ipv4.conf.all.src_valid_mark=1"
      "--sysctl=net.ipv4.ip_forward=1"
      "--sysctl=net.ipv6.conf.all.disable_ipv6=0"
      "--sysctl=net.ipv6.conf.all.forwarding=1"
      "--sysctl=net.ipv6.conf.default.forwarding=1"
    ];
  };
  systemd.services."podman-wg-easy" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-wge_wg.service"
      "podman-volume-wge_etc_wireguard.service"
    ];
    requires = [
      "podman-network-wge_wg.service"
      "podman-volume-wge_etc_wireguard.service"
    ];
    partOf = [
      "podman-compose-wge-root.target"
    ];
    wantedBy = [
      "podman-compose-wge-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-wge_wg" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f wge_wg";
    };
    script = ''
      podman network inspect wge_wg || podman network create wge_wg --driver=bridge --subnet=10.42.42.0/24 --subnet=fdcc:ad94:bacf:61a3::/64 --ipv6
    '';
    partOf = [ "podman-compose-wge-root.target" ];
    wantedBy = [ "podman-compose-wge-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-wge_etc_wireguard" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect wge_etc_wireguard || podman volume create wge_etc_wireguard
    '';
    partOf = [ "podman-compose-wge-root.target" ];
    wantedBy = [ "podman-compose-wge-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-wge-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
