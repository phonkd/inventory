# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:
let
  fireshareauthtemp = if builtins.pathExists config.sops.secrets."fireshare".path then
                    builtins.readFile config.sops.secrets."fireshare".path
                  else
                    "default_auth_token_placeholder";
  fireshareauthtemp2 = if builtins.pathExists config.sops.secrets."firesharesec".path then
                    builtins.readFile config.sops.secrets."firesharesec".path
                  else
                    "default_auth_token_placeholder";
in
{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."fireshare" = {
    image = "shaneisrael/fireshare:latest";
    environment = {
      "ADMIN_PASSWORD" = fireshareauthtemp;
      "ADMIN_USERNAME" = "admin";
      "DOMAIN" = "";
      "MINUTES_BETWEEN_VIDEO_SCANS" = "5";
      "PGID" = "1000";
      "PUID" = "1000";
      "SECRET_KEY" = fireshareauthtemp2;
      "THUMBNAIL_VIDEO_LOCATION" = "0";
    };
    volumes = [
      "/var/dev_root/fireshare_data:/data:rw"
      "/var/dev_root/fireshare_processed:/processed:rw"
      "/var/dev_root/fireshare_videos:/videos:rw"
    ];
    ports = [
      "8080:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=fireshare"
      "--network=fireshare_default"
    ];
  };
  systemd.services."podman-fireshare" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-fireshare_default.service"
    ];
    requires = [
      "podman-network-fireshare_default.service"
    ];
    partOf = [
      "podman-compose-fireshare-root.target"
    ];
    wantedBy = [
      "podman-compose-fireshare-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-fireshare_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f fireshare_default";
    };
    script = ''
      podman network inspect fireshare_default || podman network create fireshare_default
    '';
    partOf = [ "podman-compose-fireshare-root.target" ];
    wantedBy = [ "podman-compose-fireshare-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-fireshare-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
  services.caddy = {
    virtualHosts."share.nix-services.phonkd.net".extraConfig = ''
      reverse_proxy :8080
    '';
  };
}
