# Auto-generated using compose2nix v0.3.1.
{ pkgs, config, lib, ... }:
let
  rustfssecretkeytmp = if builtins.pathExists config.sops.secrets."rustfssecretkeytmp".path then
        builtins.readFile config.sops.secrets."rustfssecretkeytmp".path
    else
        "default_auth_token_placeholder";
in
{
  # services.caddy = {
  #   virtualHosts."ihateS5.w.phonkd.net".extraConfig = ''
  #     reverse_proxy :9000
  #   '';
  # };
  services.caddy = {
    virtualHosts."s5.w.phonkd.net".extraConfig = ''
      reverse_proxy :9000 {
        buffer_size 0
      }
    '';
  };
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  sops.secrets.rustfssecretkeytmp = lib.mkForce {
      owner = "root";
      key = "rustfssecretkeytmp";
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."rustfs-server" = {
    image = "rustfs/rustfs:latest";
    environment = {
      "RUSTFS_ADDRESS" = "0.0.0.0:9000";
      "RUSTFS_CONSOLE_ENABLE" = "true";
      "RUSTFS_LOG_LEVEL" = "info";
      "RUSTFS_VOLUMES" = "/data/rustfs0";
      "RUSTFS_SECRET_KEY" = "${rustfssecretkeytmp}";
    };
    volumes = [
      "rustfs_rustfs_data_0:/data/rustfs0:rw"
    ];
    ports = [
      "9000:9000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=[\"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9000/health\"]"
      "--health-interval=30s"
      "--health-retries=3"
      "--health-start-period=40s"
      "--health-timeout=10s"
      "--network-alias=rustfs"
      "--network=rustfs_default"
      "--security-opt=no-new-privileges:true"
    ];
  };
  systemd.services."podman-rustfs-server" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-rustfs_default.service"
      "podman-volume-rustfs_rustfs_data_0.service"
    ];
    requires = [
      "podman-network-rustfs_default.service"
      "podman-volume-rustfs_rustfs_data_0.service"
    ];
    partOf = [
      "podman-compose-rustfs-root.target"
    ];
    wantedBy = [
      "podman-compose-rustfs-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-rustfs_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f rustfs_default";
    };
    script = ''
      podman network inspect rustfs_default || podman network create rustfs_default
    '';
    partOf = [ "podman-compose-rustfs-root.target" ];
    wantedBy = [ "podman-compose-rustfs-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-rustfs_rustfs_data_0" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect rustfs_rustfs_data_0 || podman volume create rustfs_rustfs_data_0 --driver=local
    '';
    partOf = [ "podman-compose-rustfs-root.target" ];
    wantedBy = [ "podman-compose-rustfs-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-rustfs-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
