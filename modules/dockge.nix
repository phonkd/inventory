# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  systemd.tmpfiles.rules = [
    "d /var/lib/dockge 0750 root root"
    "d /var/lib/dockge/data 0750 root root"
    "d /opt/stacks 0750 root root"
  ];

  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."dockge-dockge" = {
    image = "louislam/dockge:1";
    environment = {
      "DOCKGE_STACKS_DIR" = "/opt/stacks";
    };
    volumes = [
      "/var/lib/dockge/data:/app/data:rw"
    ];
    ports = [
      "5001:5001/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=host"
    ];
  };
  systemd.services."podman-dockge-dockge" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-dockge-root.target"
    ];
    wantedBy = [
      "podman-compose-dockge-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-dockge-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
  services.teleport.settings = {
    app_service = {
      enabled = true;
      apps = [
        {
          name = "dockge";
          uri = "http://localhost:5001";
          insecure_skip_verify = true;
        }
      ];
    };
  };
}
